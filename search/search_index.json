{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Starlite Multipart \u00b6 This library offers a toolkit for working with multipart form-data. It's based on the Werkzeug multipart decoder/encoder implementation and is designed to be a zero dependency library that can be used on its own. Its also used internally by Starlite , but Starlite is not required for it to function. Installation \u00b6 pip install starlite-multipart","title":"Starlite Multipart"},{"location":"#starlite-multipart","text":"This library offers a toolkit for working with multipart form-data. It's based on the Werkzeug multipart decoder/encoder implementation and is designed to be a zero dependency library that can be used on its own. Its also used internally by Starlite , but Starlite is not required for it to function.","title":"Starlite Multipart"},{"location":"#installation","text":"pip install starlite-multipart","title":"Installation"},{"location":"reference/SUMMARY/","text":"starlite_multipart","title":"SUMMARY"},{"location":"reference/starlite_multipart/","text":"MultipartDecoder \u00b6 MultipartDecoder ( message_boundary , max_file_size = None , charset = 'utf-8' ) Parameters: Name Type Description Default message_boundary Union [ bytes , str ] The message message_boundary as specified by [RFC7578][https://www.rfc-editor.org/rfc/rfc7578] required max_file_size Optional [ int ] Maximum number of bytes allowed for the message. None next_event \u00b6 next_event () Processes the data according the parser's processing_stage. The processing_stage is updated according to the parser's processing_stage machine logic. Thus calling this method updates the processing_stage as well. Returns: Type Description Optional [ MultipartMessageEvent ] An optional event instance, depending on the processing_stage of the message processing. MultipartEncoder \u00b6 MultipartEncoder ( message_boundary ) Parameters: Name Type Description Default message_boundary bytes The message message_boundary. required send_event \u00b6 send_event ( event ) Encodes an event into a byte string. Parameters: Name Type Description Default event MultipartMessageEvent An event instance. required Returns: Type Description bytes An encoded byte string. MultipartFormDataParser \u00b6 MultipartFormDataParser ( headers , stream , max_file_size , charset = 'utf-8' ) Parameters: Name Type Description Default headers Mapping [ str , str ] A mapping of headers. required stream AsyncGenerator [ bytes , None] An async generator yielding a stream. required max_file_size Optional [ int ] Max file size allowed. required charset str Charset used to encode the data. 'utf-8' __call__ async \u00b6 __call__ () Asynchronously parses the stream data. Returns: Type Description List [ Tuple [ str , Union [ str , UploadFile ]]] A list of tuples, each containing the field name and its value - either a string or an upload file datum. parse async \u00b6 parse () Parses a chunk into a list of items. Returns: Type Description List [ Tuple [ str , Union [ str , UploadFile ]]] A list of tuples, each containing the field name and its value - either a string or an upload file datum. UploadFile \u00b6 UploadFile ( filename , content_type , headers = None , spool_max_size = 1024 * 1024 , file = None ) Parameters: Name Type Description Default filename str The filename. required content_type str Content type for the file. required headers Optional [ Dict [ str , str ]] Any attached headers. None spool_max_size int Max value to allocate for temporary files. 1024 * 1024 file Optional [ BinaryIO ] Optional file data. None close async \u00b6 close () Async proxy for file close. Returns: Type Description None None. read async \u00b6 read ( size =- 1 ) Async proxy for data reading. Parameters: Name Type Description Default size int position from which to read. -1 Returns: Type Description bytes Byte string. seek async \u00b6 seek ( offset ) Async proxy for file seek. Parameters: Name Type Description Default offset int start position.. required Returns: Type Description None None. write async \u00b6 write ( data ) Async proxy for data writing. Parameters: Name Type Description Default data bytes Byte string to write. required Returns: Type Description None None parse_options_header \u00b6 parse_options_header ( value ) Parses a 'Content-Type' or 'Content-Disposition' header, returning the header value and any options as a dictionary. Parameters: Name Type Description Default value Optional [ str ] An optional header string. required Returns: Type Description Tuple [ str , Dict [ str , str ]] A tuple with the parsed value and a dictionary containing any options send in it.","title":"starlite_multipart"},{"location":"reference/starlite_multipart/#starlite_multipart.MultipartDecoder","text":"MultipartDecoder ( message_boundary , max_file_size = None , charset = 'utf-8' ) Parameters: Name Type Description Default message_boundary Union [ bytes , str ] The message message_boundary as specified by [RFC7578][https://www.rfc-editor.org/rfc/rfc7578] required max_file_size Optional [ int ] Maximum number of bytes allowed for the message. None","title":"MultipartDecoder"},{"location":"reference/starlite_multipart/#starlite_multipart.decoder.MultipartDecoder.next_event","text":"next_event () Processes the data according the parser's processing_stage. The processing_stage is updated according to the parser's processing_stage machine logic. Thus calling this method updates the processing_stage as well. Returns: Type Description Optional [ MultipartMessageEvent ] An optional event instance, depending on the processing_stage of the message processing.","title":"next_event()"},{"location":"reference/starlite_multipart/#starlite_multipart.MultipartEncoder","text":"MultipartEncoder ( message_boundary ) Parameters: Name Type Description Default message_boundary bytes The message message_boundary. required","title":"MultipartEncoder"},{"location":"reference/starlite_multipart/#starlite_multipart.encoder.MultipartEncoder.send_event","text":"send_event ( event ) Encodes an event into a byte string. Parameters: Name Type Description Default event MultipartMessageEvent An event instance. required Returns: Type Description bytes An encoded byte string.","title":"send_event()"},{"location":"reference/starlite_multipart/#starlite_multipart.MultipartFormDataParser","text":"MultipartFormDataParser ( headers , stream , max_file_size , charset = 'utf-8' ) Parameters: Name Type Description Default headers Mapping [ str , str ] A mapping of headers. required stream AsyncGenerator [ bytes , None] An async generator yielding a stream. required max_file_size Optional [ int ] Max file size allowed. required charset str Charset used to encode the data. 'utf-8'","title":"MultipartFormDataParser"},{"location":"reference/starlite_multipart/#starlite_multipart.parser.MultipartFormDataParser.__call__","text":"__call__ () Asynchronously parses the stream data. Returns: Type Description List [ Tuple [ str , Union [ str , UploadFile ]]] A list of tuples, each containing the field name and its value - either a string or an upload file datum.","title":"__call__()"},{"location":"reference/starlite_multipart/#starlite_multipart.parser.MultipartFormDataParser.parse","text":"parse () Parses a chunk into a list of items. Returns: Type Description List [ Tuple [ str , Union [ str , UploadFile ]]] A list of tuples, each containing the field name and its value - either a string or an upload file datum.","title":"parse()"},{"location":"reference/starlite_multipart/#starlite_multipart.UploadFile","text":"UploadFile ( filename , content_type , headers = None , spool_max_size = 1024 * 1024 , file = None ) Parameters: Name Type Description Default filename str The filename. required content_type str Content type for the file. required headers Optional [ Dict [ str , str ]] Any attached headers. None spool_max_size int Max value to allocate for temporary files. 1024 * 1024 file Optional [ BinaryIO ] Optional file data. None","title":"UploadFile"},{"location":"reference/starlite_multipart/#starlite_multipart.datastructures.UploadFile.close","text":"close () Async proxy for file close. Returns: Type Description None None.","title":"close()"},{"location":"reference/starlite_multipart/#starlite_multipart.datastructures.UploadFile.read","text":"read ( size =- 1 ) Async proxy for data reading. Parameters: Name Type Description Default size int position from which to read. -1 Returns: Type Description bytes Byte string.","title":"read()"},{"location":"reference/starlite_multipart/#starlite_multipart.datastructures.UploadFile.seek","text":"seek ( offset ) Async proxy for file seek. Parameters: Name Type Description Default offset int start position.. required Returns: Type Description None None.","title":"seek()"},{"location":"reference/starlite_multipart/#starlite_multipart.datastructures.UploadFile.write","text":"write ( data ) Async proxy for data writing. Parameters: Name Type Description Default data bytes Byte string to write. required Returns: Type Description None None","title":"write()"},{"location":"reference/starlite_multipart/#starlite_multipart.parse_options_header","text":"parse_options_header ( value ) Parses a 'Content-Type' or 'Content-Disposition' header, returning the header value and any options as a dictionary. Parameters: Name Type Description Default value Optional [ str ] An optional header string. required Returns: Type Description Tuple [ str , Dict [ str , str ]] A tuple with the parsed value and a dictionary containing any options send in it.","title":"parse_options_header()"}]}